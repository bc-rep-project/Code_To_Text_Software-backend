# Generated by Django 3.2.20 on 2025-05-28 07:26

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConversionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('converted_artifact_path', models.CharField(blank=True, max_length=500, null=True)),
                ('google_drive_folder_id', models.CharField(blank=True, max_length=255, null=True)),
                ('google_drive_folder_link', models.URLField(blank=True, null=True)),
                ('total_files_converted', models.IntegerField(default=0)),
                ('conversion_size_bytes', models.BigIntegerField(default=0)),
                ('conversion_duration_seconds', models.FloatField(default=0.0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('download_count', models.IntegerField(default=0)),
                ('last_downloaded_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'conversion_results',
            },
        ),
        migrations.CreateModel(
            name='GitHubCommit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sha', models.CharField(max_length=40, unique=True)),
                ('message', models.TextField()),
                ('author_name', models.CharField(max_length=255)),
                ('author_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('additions', models.IntegerField(default=0)),
                ('deletions', models.IntegerField(default=0)),
                ('changed_files', models.IntegerField(default=0)),
                ('commit_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'github_commits',
                'ordering': ['-commit_date'],
            },
        ),
        migrations.CreateModel(
            name='GitHubInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('stars', models.IntegerField(default=0)),
                ('forks', models.IntegerField(default=0)),
                ('open_issues_count', models.IntegerField(default=0)),
                ('owner', models.CharField(max_length=255)),
                ('repo_name', models.CharField(max_length=255)),
                ('default_branch', models.CharField(default='main', max_length=100)),
                ('repo_created_at', models.DateTimeField(blank=True, null=True)),
                ('repo_updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'github_info',
            },
        ),
        migrations.CreateModel(
            name='GitHubIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('github_issue_id', models.IntegerField()),
                ('title', models.CharField(max_length=500)),
                ('url', models.URLField()),
                ('state', models.CharField(max_length=20)),
                ('author', models.CharField(blank=True, max_length=255, null=True)),
                ('labels', models.JSONField(default=list)),
                ('issue_created_at', models.DateTimeField()),
                ('issue_updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'github_issues',
                'ordering': ['-issue_created_at'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=255)),
                ('source_type', models.CharField(choices=[('github', 'GitHub Repository'), ('upload', 'Uploaded File')], max_length=10)),
                ('github_repo_url', models.URLField(blank=True, null=True)),
                ('uploaded_file_key', models.CharField(blank=True, max_length=500, null=True)),
                ('original_file_name', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('pending_scan', 'Pending Scan'), ('scanning', 'Scanning'), ('scanned', 'Scanned'), ('conversion_pending', 'Conversion Pending'), ('converting', 'Converting'), ('converted', 'Converted'), ('uploading_to_drive', 'Uploading to Drive'), ('completed', 'Completed'), ('error', 'Error'), ('monitoring_github', 'Monitoring GitHub')], default='pending_scan', max_length=20)),
                ('last_scan_at', models.DateTimeField(blank=True, null=True)),
                ('last_conversion_at', models.DateTimeField(blank=True, null=True)),
                ('last_github_commit_hash', models.CharField(blank=True, max_length=40, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScanData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languages_used', models.JSONField(default=dict)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('total_files', models.IntegerField(default=0)),
                ('total_size_bytes', models.BigIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='scan_data', to='projects.project')),
            ],
            options={
                'db_table': 'scan_data',
            },
        ),
        migrations.CreateModel(
            name='ProjectMonitoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False)),
                ('check_frequency_hours', models.IntegerField(default=24)),
                ('last_checked_at', models.DateTimeField(blank=True, null=True)),
                ('last_known_commit_hash', models.CharField(blank=True, max_length=40, null=True)),
                ('notify_on_update', models.BooleanField(default=True)),
                ('auto_convert_on_update', models.BooleanField(default=False)),
                ('total_updates_detected', models.IntegerField(default=0)),
                ('last_update_detected_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring', to='projects.project')),
            ],
            options={
                'db_table': 'project_monitoring',
            },
        ),
    ]
